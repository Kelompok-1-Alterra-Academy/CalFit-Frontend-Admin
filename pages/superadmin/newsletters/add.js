import { useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { Box, Button, Container, TextField, Typography } from '@mui/material';
import { useStyles } from '../../../styles/clubs/Add.style';
import { TopBar } from '../../../src/components/navigation/TopBar';
import { MenuBar } from '../../../src/components/navigation/MenuBar';
import { createNewsletter } from '../../../src/utils/fetchApi/newsletters';
import { cloudinaryUploadApi } from '../../../src/utils/fetchApi/api';

const emptyData = {
  title: '',
  operationalAdminId: 0,
  description: '',
  content: '',
  url_picture: '',
};

export default function AddNewsletter() {
  const classes = useStyles();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState(emptyData);
  const [picture, setPicture] = useState('');
  const [error, setError] = useState({
    title: { status: false, message: '' },
    operationalAdminId: { status: false, message: '' },
    description: { status: false, message: '' },
    content: { status: false, message: '' },
    url_picture: { status: false, message: '' },
  });
  const [alert, setAlert] = useState({
    status: false,
    message: '',
  });

  const handleOnChange = (e) => {
    switch (e.target.name) {
      case 'operationalAdminId':
        setData({ ...data, operationalAdminId: parseInt(e.target.value) });
        break;
      default:
        setData({ ...data, [e.target.name]: e.target.value });
    }
  };

  const handleChangePicture = (e) => {
    if (!e.target.files[0]) {
      setError({ ...error, picture: { status: true, message: 'picture is required' } });
    }
    setPicture(e.target.files[0]);
  };

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    const { title, operationalAdminId, description, content } = data;
    if (
      title === '' ||
      operationalAdminId === '' ||
      description === '' ||
      content === ''
    ) {
      setAlert({
        status: true,
        message: 'please fill all fields',
      });
    } else {
      setLoading(true);
      const pict = await cloudinaryUploadApi(picture);
      const newData = {
        ...data,
        url_picture: pict,
      };
      if (!newData.url_picture) {
        setError({ ...error, picture: { status: true, message: 'please upload a picture' } });
        setAlert({ status: true, message: 'please upload a picture' });
      } else {
        const res = await createNewsletter(setAlert, newData);
        if (res?.status === 201) {
          setData(emptyData);
          router.push('/superadmin/newsletters');
        }
      }
      setLoading(false);
    }
  };

  return (
    <div className={classes.root}>
      <Head>
        <title>Add New Newsletter</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <TopBar />

      <main className={classes.main}>
        <MenuBar selected={'Newsletters'} />
        <Container className={classes.form}>
          <Box
            component='form'
            className={classes.loginForm}
            onSubmit={(e) => handleOnSubmit(e)}
            style={{
              opacity: loading ? 0.3 : 1,
              pointerEvents: loading ? 'none' : 'all',
            }}
          >
            <TextField
              className={classes.textField}
              label='Title'
              name='title'
              path='text'
              value={data.title}
              onChange={(e) => handleOnChange(e)}
              error={error.title.status}
              helperText={error.title.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label='Admin Id'
              name='operationalAdminId'
              path='text'
              type='number'
              value={data.operationalAdminId}
              onChange={(e) => handleOnChange(e)}
              error={error.operationalAdminId.status}
              helperText={error.operationalAdminId.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label='Description'
              multiline
              minRows={5}
              name='description'
              path='text'
              value={data.description}
              onChange={(e) => handleOnChange(e)}
              error={error.description.status}
              helperText={error.description.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label='Content'
              multiline
              minRows={5}
              name='content'
              path='text'
              value={data.content}
              onChange={(e) => handleOnChange(e)}
              error={error.content.status}
              helperText={error.content.message}
            ></TextField>
            <Typography className={classes.textFieldTitle}>Picture</Typography>
            <TextField
              className={classes.textField}
              style={{ marginTop: 0 }}
              placeholder='Picture'
              type='file'
              name='picture'
              onChange={(e) => handleChangePicture(e)}
              error={error.url_picture.status}
              helperText={error.url_picture.message}
            ></TextField>
            {loading ? (
              <Button type='submit' variant='contained' className={classes.button} disabled>
                SUBMIT
              </Button>
            ) : (
              <Button type='submit' variant='contained' className={classes.button}>
                SUBMIT
              </Button>
            )}
          </Box>
        </Container>
      </main>
    </div>
  );
}
