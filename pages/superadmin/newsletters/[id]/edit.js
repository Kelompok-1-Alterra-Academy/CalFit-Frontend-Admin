import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { Box, Button, Container, Grid, TextField, Typography } from '@mui/material';
import { useStyles } from '../../../../styles/clubs/[id]/Edit.style';
import { TopBar } from '../../../../src/components/navigation/TopBar';
import { MenuBar } from '../../../../src/components/navigation/MenuBar';
import { getNewsletterById, updateNewsletter } from '../../../../src/utils/fetchApi/newsletters';
import { cloudinaryUploadApi } from '../../../../src/utils/fetchApi/api';

const emptyData = {
    title: '',
    operationalAdminId: 0,
    description: '',
    content: '',
    url_picture: '',
};

export default function UpdateNewsletter() {
    const classes = useStyles();
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [newsletter, setNewsletter] = useState(emptyData);
    const [data, setData] = useState(emptyData);
    const [picture, setPicture] = useState('');
    const [error, setError] = useState({
      title: { status: false, message: '' },
      operationalAdminId: { status: false, message: '' },
      description: { status: false, message: '' },
      content: { status: false, message: '' },
      url_picture: { status: false, message: '' },
    });
    const [alert, setAlert] = useState({
      status: false,
      message: '',
    });

  useEffect(() => {
    if (window.localStorage) {
      if (!localStorage.getItem('firstLoad')) {
        localStorage.setItem('firstLoad', true);
        window.location.reload();
      } else localStorage.removeItem('firstLoad');
    }
  }, []);

  useEffect(() => {
    if (router.query.id) {
      getNewsletterById(setLoading, setNewsletter, router.query.id);
    }
  }, [router.query.id]);

  useEffect(() => {
    setData({
      id: newsletter.id,
      title: newsletter.title,
      operationalAdminId: newsletter.operationalAdminId,
      description: newsletter.description,
      content: newsletter.content,
      url_picture: newsletter.url_picture,
    });
  }, [newsletter]);

  const handleOnChange = (e) => {
    switch (e.target.name) {
      case 'operationalAdminId':
        setData({ ...data, operationalAdminId: parseInt(e.target.value) });
        break;
      default:
        if (e.target.value === '') {
          setError({ ...error, [e.target.name]: { status: false, message: 'please fill in this field' } });
          break;
        }
        setData({ ...data, [e.target.name]: e.target.value });
    }
  };

  const handleChangePicture = (e) => {
    if (!e.target.files[0]) return;
    setPicture(e.target.files[0]);
  };

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    const { title, operationalAdminId, description, content } = data;
    if (
      title === '' ||
      operationalAdminId === '' ||
      description === '' ||
      content === ''
    ) {
      setAlert({
        status: true,
        message: 'please fill all fields',
      });
    } else {
      setLoading(true);
      let pict;
      if (picture) pict = await cloudinaryUploadApi(picture);
      const newData = {
        ...data,
        picture: picture ? pict : data.url_picture,
      };
      if (!newData.picture) {
        setError({ ...error, picture: { status: true, message: 'please upload a picture' } });
        setAlert({ status: true, message: 'please upload a picture' });
      } else {
        const res = await updateGym(setAlert, newData);
        if (res?.status === 202) {
          setData(emptyData);
          router.push('/superadmin/newsletters');
        }
      }
      setLoading(false);
    }
  };

  return (
    <div className={classes.root}>
      <Head>
        <title>Edit Newletters</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <TopBar />

      <main className={classes.main}>
        <Grid container spacing={2} m={2}>
          <Grid item xs={3}>
            <MenuBar selected={'Clubs'} />
          </Grid>
          <Grid item xs={9}>
            <Container className={classes.form}>
                <Box
                    component='form'
                    className={classes.loginForm}
                    onSubmit={(e) => handleOnSubmit(e)}
                    style={{
                    opacity: loading ? 0.3 : 1,
                    pointerEvents: loading ? 'none' : 'all',
                    }}
                >
                    <TextField
                    className={classes.textField}
                    label='Title'
                    name='title'
                    path='text'
                    value={data.title}
                    onChange={(e) => handleOnChange(e)}
                    error={error.title.status}
                    helperText={error.title.message}
                    ></TextField>
                    <TextField
                    className={classes.textField}
                    label='Admin Id'
                    name='operationalAdminId'
                    path='text'
                    type='number'
                    value={data.operationalAdminId}
                    onChange={(e) => handleOnChange(e)}
                    error={error.operationalAdminId.status}
                    helperText={error.operationalAdminId.message}
                    ></TextField>
                    <TextField
                    className={classes.textField}
                    label='Description'
                    multiline
                    minRows={5}
                    name='description'
                    path='text'
                    value={data.description}
                    onChange={(e) => handleOnChange(e)}
                    error={error.description.status}
                    helperText={error.description.message}
                    ></TextField>
                    <TextField
                    className={classes.textField}
                    label='Content'
                    multiline
                    minRows={5}
                    name='content'
                    path='text'
                    value={data.content}
                    onChange={(e) => handleOnChange(e)}
                    error={error.content.status}
                    helperText={error.content.message}
                    ></TextField>
                    <Typography className={classes.textFieldTitle}>Picture</Typography>
                    <TextField
                    className={classes.textField}
                    style={{ marginTop: 0 }}
                    placeholder='Picture'
                    type='file'
                    name='picture'
                    onChange={(e) => handleChangePicture(e)}
                    error={error.url_picture.status}
                    helperText={error.url_picture.message}
                    ></TextField>
                    {loading ? (
                    <Button type='submit' variant='contained' className={classes.button} disabled>
                        SUBMIT
                    </Button>
                    ) : (
                    <Button type='submit' variant='contained' className={classes.button}>
                        SUBMIT
                    </Button>
                    )}
                </Box>
            </Container>
          </Grid>
        </Grid>
      </main>
    </div>
  );
}
