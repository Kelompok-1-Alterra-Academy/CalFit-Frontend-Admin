import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from "next/head";
import {
  TextField,
  Button,
  Container,
  TextareaAutosize,
  InputAdornment,
  IconButton,
  Typography,
  Box,
  Link as MaterialLink,
} from "@mui/material";
import { useStyles } from "../../../styles/clubs/Add.style";
import { TopBar } from "../../../src/components/navigation/TopBar";
import { MenuBar } from "../../../src/components/navigation/MenuBar";
import { telephoneValidation, postalCodeValidation } from "../../../src/utils/validation/validation";
import { createGym } from '../../../src/utils/fetchApi/clubs';

const emptyData = {
  name: "",
  operationalAdminId: 0,
  description: "",
  telephone: "",
  address: "",
  district: "",
  city: "",
  postalCode: "",
  // picture: "https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80",
  picture: "",
};

export default function AddClub() {
  const classes = useStyles();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState(emptyData);
  const [picture, setPicture] = useState("");
  const [error, setError] = useState({
    name: { status: false, message: "" },
    operationalAdminId: { status: false, message: "" },
    description: { status: false, message: "" },
    telephone: { status: false, message: "" },
    address: { status: false, message: "" },
    district: { status: false, message: "" },
    city: { status: false, message: "" },
    postalCode: { status: false, message: "" },
    picture: { status: false, message: "" },
  });
  const [alert, setAlert] = useState({
    status: false,
    message: "",
  });

  const handleOnChange = (e) => {
    switch (e.target.name) {
      case "operationalAdminId":
        setData({ ...data, operationalAdminId: parseInt(e.target.value) });
        break;
      case "telephone":
        setData({ ...data, telephone: e.target.value });
        telephoneValidation(e.target.value)
          ? setError({ ...error, telephone: { status: false, message: "" } })
          : setError({
            ...error,
            telephone: {
              status: true,
              message:
                "telephone must be at least 10 characters long and contain only numbers",
            },
          });
        break;
      case "postalCode":
        setData({ ...data, postalCode: e.target.value });
        postalCodeValidation(e.target.value)
          ? setError({ ...error, postalCode: { status: false, message: "" } })
          : setError({
            ...error,
            postalCode: {
              status: true,
              message:
                "postal code must be 5 characters long and contain only numbers",
            },
          });
      default:
        setData({ ...data, [e.target.name]: e.target.value });
    }
  };

  const handleChangePicture = (e) => {
    setPicture(e.target.files[0]);
  };

  const handleUploadPicture = async () => {
    if (!picture) return;
    const formData = new FormData();
    formData.append("file", picture);
    formData.append("upload_preset", "calfit");
    formData.append("cloud_name", "hydeblazack");

    return await fetch("https://api.cloudinary.com/v1_1/hydeblazack/image/upload", {
      method: "post",
      body: formData,
    }).then((res) => res.json())
      .then((data) => {
        // setData({ ...data, picture: data.secure_url });
        return data.secure_url;
      })
      .catch((err) => setError({ ...error, picture: { status: true, message: err } }));
  };

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    const { name, operationalAdminId, description, telephone, address, district, city, postalCode } = data;
    if (name === "" || operationalAdminId === "" || description === "" || telephone === "" || address === "" || district === "" || city === "" || postalCode === "") {
      setAlert({
        status: true,
        message: "please fill all fields",
      });
    } else {
      setLoading(true);
      const pict = await handleUploadPicture();
      const newData = {
        ...data, picture: pict
      };
      if (newData.picture === "") {
        setAlert({
          status: true,
          message: "please upload a picture",
        });
      } else {
        const res = await createGym(setAlert, newData);
        if (res?.status === 201) {
          setData(emptyData);
          router.push("/superadmin/clubs");
        }
      }
      setLoading(false);
    }
  };

  return (
    <div className={classes.root}>
      <Head>
        <title>Add New Club</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <TopBar />

      <main className={classes.main}>
        <MenuBar selected={"Clubs"} />
        <Container className={classes.form}>
          {/* {loading ? (
            <div className={classes.loading}>
              Loading...
            </div>
          ) : ( */}
          <Box
            component="form"
            className={classes.loginForm}
            onSubmit={(e) => handleOnSubmit(e)}
            style={{
              opacity: loading ? 0 : 1,
              // pointerEvents: loading ? "none" : "all",
            }}
          >
            <TextField
              className={classes.textField}
              label="Name"
              name="name"
              path="text"
              value={data.name}
              onChange={(e) => handleOnChange(e)}
              error={error.name.status}
              helperText={error.name.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="Admin Id"
              name="operationalAdminId"
              path="text"
              type="number"
              value={data.operationalAdminId}
              onChange={(e) => handleOnChange(e)}
              error={error.operationalAdminId.status}
              helperText={error.operationalAdminId.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="Description"
              multiline
              minRows={5}
              name="description"
              path="text"
              value={data.description}
              onChange={(e) => handleOnChange(e)}
              error={error.description.status}
              helperText={error.description.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="Telephone"
              name="telephone"
              value={data.telephone}
              onChange={(e) => handleOnChange(e)}
              error={error.telephone.status}
              helperText={error.telephone.message}
            ></TextField>
            <TextField
              className={classes.textField}
              multiline
              minRows={3}
              label="Address"
              name="address"
              path="text"
              value={data.address}
              onChange={(e) => handleOnChange(e)}
              error={error.address.status}
              helperText={error.address.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="District"
              name="district"
              value={data.district}
              onChange={(e) => handleOnChange(e)}
              error={error.district.status}
              helperText={error.district.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="City"
              name="city"
              value={data.city}
              onChange={(e) => handleOnChange(e)}
              error={error.city.status}
              helperText={error.city.message}
            ></TextField>
            <TextField
              className={classes.textField}
              label="Postal Code"
              name="postalCode"
              value={data.postalCode}
              onChange={(e) => handleOnChange(e)}
              error={error.postalCode.status}
              helperText={error.postalCode.message}
            ></TextField>
            <Typography
              style={{
                textAlign: "left",
                marginBottom: 0,
              }}
            >
              Picture
            </Typography>
            <TextField
              className={classes.textField}
              style={{ marginTop: 0 }}
              placeholder="Picture"
              type="file"
              name="picture"
              onChange={(e) => handleChangePicture(e)}
            ></TextField>
            <Button type="submit" variant="contained" className={classes.button}>
              SUBMIT
            </Button>
          </Box>
        </Container>
      </main>
    </div>
  );
}
